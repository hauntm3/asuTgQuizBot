import logging
import asyncio
import random
import os
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
from database import create_tables, SessionLocal, Question, UserProgress, UserStats
from sqlalchemy import select, desc, func
from datetime import datetime

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.getenv("BOT_TOKEN")


async def main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE, message=None):
    keyboard = [
        [InlineKeyboardButton("üéØ –ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", callback_data="start_test")],
        [InlineKeyboardButton("üìä –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤", callback_data="leaderboard")],
        [InlineKeyboardButton("üìà –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="my_stats")],
        [InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    text = message or (
        "üéØ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Java Quiz Bot!\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è Java –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —É—Ä–æ–≤–Ω—è—Ö —Å–ª–æ–∂–Ω–æ—Å—Ç–∏.\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:"
    )

    if update.callback_query:
        await update.callback_query.edit_message_text(
            text=text, reply_markup=reply_markup
        )
    else:
        await update.message.reply_text(text=text, reply_markup=reply_markup)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await main_menu(update, context)


async def show_language_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("Java", callback_data="lang_java")],
        [InlineKeyboardButton("Python", callback_data="lang_python")],
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.callback_query.edit_message_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=reply_markup
    )


async def handle_language_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    context.user_data["selected_language"] = query.data.split("_")[1]

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Ä–æ–≤–Ω–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞
    await show_difficulty_levels(update, context)


async def show_difficulty_levels(update: Update, context: ContextTypes.DEFAULT_TYPE):
    selected_language = context.user_data.get("selected_language", "java")
    lang_prefix = "Python" if selected_language == "python" else "Java"

    keyboard = [
        [
            InlineKeyboardButton(
                f"üë∂ {lang_prefix} Junior",
                callback_data=f"level_{selected_language}_junior",
            )
        ],
        [
            InlineKeyboardButton(
                f"üë®‚Äçüíª {lang_prefix} Middle",
                callback_data=f"level_{selected_language}_middle",
            )
        ],
        [
            InlineKeyboardButton(
                f"üßô‚Äç‚ôÇÔ∏è {lang_prefix} Senior",
                callback_data=f"level_{selected_language}_senior",
            )
        ],
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.callback_query.edit_message_text(
        f"–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è {lang_prefix}:", reply_markup=reply_markup
    )


async def handle_level_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –∏ —É—Ä–æ–≤–µ–Ω—å –∏–∑ callback_data
    _, language, level = query.data.split("_")
    user_id = query.from_user.id
    username = query.from_user.username or f"User{user_id}"

    db = SessionLocal()
    try:
        # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å
        db.query(UserProgress).filter(UserProgress.user_id == user_id).delete()

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞ –∏ —É—Ä–æ–≤–Ω—è
        level_key = f"{level}_{language}" if language == "python" else level
        questions = db.query(Question).filter(Question.level == level_key).all()

        # –í—ã–±–∏—Ä–∞–µ–º 10 —Å–ª—É—á–∞–π–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
        selected_questions = random.sample(questions, 10)
        selected_question_ids = [q.id for q in selected_questions]

        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏
        progress = UserProgress(
            user_id=user_id,
            level=level_key,
            is_testing=True,
            question_ids=",".join(map(str, selected_question_ids)),
        )
        db.add(progress)

        # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        stats = db.query(UserStats).filter(UserStats.user_id == user_id).first()
        if not stats:
            stats = UserStats(user_id=user_id, username=username)
            db.add(stats)

        db.commit()

        lang_name = "Python" if language == "python" else "Java"
        await query.edit_message_text(
            f"üìö –í—ã –≤—ã–±—Ä–∞–ª–∏ {lang_name}, —É—Ä–æ–≤–µ–Ω—å: {level.capitalize()}\n"
            "–ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ! –£–¥–∞—á–∏! üçÄ\n\n"
            "–í—Å–µ–≥–æ –±—É–¥–µ—Ç 10 –≤–æ–ø—Ä–æ—Å–æ–≤. –ù–∞ –∫–∞–∂–¥—ã–π –≤–æ–ø—Ä–æ—Å –¥–∞–µ—Ç—Å—è 4 –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞."
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
        await send_question(update, context, user_id)

    finally:
        db.close()


async def send_question(
    update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int
):
    db = SessionLocal()
    try:
        progress = (
            db.query(UserProgress).filter(UserProgress.user_id == user_id).first()
        )
        if not progress or not progress.is_testing:
            return

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ ID –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
        question_ids = list(map(int, progress.question_ids.split(",")))
        if progress.current_question >= len(question_ids):
            # –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω
            await finish_test(update, context, user_id, progress.correct_answers)
            return

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å –ø–æ –µ–≥–æ ID
        current_question_id = question_ids[progress.current_question]
        question = db.query(Question).filter(Question.id == current_question_id).first()

        # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å –≤–æ–ø—Ä–æ—Å–æ–º –∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤
        message_text = (
            f"‚ùì –í–æ–ø—Ä–æ—Å {progress.current_question + 1}/10:\n\n"
            f"{question.question_text}\n\n"
            f"–í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤:\n"
            f"1Ô∏è‚É£ {question.option1}\n"
            f"2Ô∏è‚É£ {question.option2}\n"
            f"3Ô∏è‚É£ {question.option3}\n"
            f"4Ô∏è‚É£ {question.option4}"
        )

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Ç–æ–ª—å–∫–æ —Å –Ω–æ–º–µ—Ä–∞–º–∏
        keyboard = [
            [
                InlineKeyboardButton("1Ô∏è‚É£", callback_data="answer_1"),
                InlineKeyboardButton("2Ô∏è‚É£", callback_data="answer_2"),
                InlineKeyboardButton("3Ô∏è‚É£", callback_data="answer_3"),
                InlineKeyboardButton("4Ô∏è‚É£", callback_data="answer_4"),
            ],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        # –í—Å–µ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–æ–ø—Ä–æ—Å–æ–º
        await context.bot.send_message(
            chat_id=user_id, text=message_text, reply_markup=reply_markup
        )

    finally:
        db.close()


async def handle_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    user_id = query.from_user.id
    selected_option = int(query.data.split("_")[1])

    db = SessionLocal()
    try:
        progress = (
            db.query(UserProgress).filter(UserProgress.user_id == user_id).first()
        )
        if not progress or not progress.is_testing:
            return

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ ID –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
        question_ids = list(map(int, progress.question_ids.split(",")))
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å –ø–æ –µ–≥–æ ID
        current_question_id = question_ids[progress.current_question]
        question = db.query(Question).filter(Question.id == current_question_id).first()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞
        is_correct = question.correct_option == selected_option
        correct_answer_text = getattr(question, f"option{question.correct_option}")
        selected_answer_text = getattr(question, f"option{selected_option}")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
        question_text = (
            f"‚ùì –í–æ–ø—Ä–æ—Å {progress.current_question + 1}/10:\n\n"
            f"{question.question_text}\n\n"
            f"–í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤:\n"
            f"1Ô∏è‚É£ {question.option1}\n"
            f"2Ô∏è‚É£ {question.option2}\n"
            f"3Ô∏è‚É£ {question.option3}\n"
            f"4Ô∏è‚É£ {question.option4}\n\n"
        )

        if is_correct:
            progress.correct_answers += 1
            feedback = (
                f"{question_text}"
                "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!\n\n"
                f"–í–∞—à –æ—Ç–≤–µ—Ç: {selected_answer_text}"
            )
        else:
            feedback = (
                f"{question_text}"
                "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ!\n\n"
                f"–í–∞—à –æ—Ç–≤–µ—Ç: {selected_answer_text}\n"
                f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_answer_text}"
            )

        progress.current_question += 1
        progress.last_answer_time = datetime.utcnow()
        db.commit()

        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —É–±–∏—Ä–∞—è –∫–Ω–æ–ø–∫–∏ –∏ –ø–æ–∫–∞–∑—ã–≤–∞—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        await query.edit_message_text(text=feedback)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –≤ –Ω–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
        await send_question(update, context, user_id)

    finally:
        db.close()


async def finish_test(
    update: Update,
    context: ContextTypes.DEFAULT_TYPE,
    user_id: int,
    correct_answers: int,
):
    db = SessionLocal()
    try:
        progress = (
            db.query(UserProgress).filter(UserProgress.user_id == user_id).first()
        )
        if not progress:
            return

        level = progress.level
        progress.is_testing = False

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        stats = db.query(UserStats).filter(UserStats.user_id == user_id).first()
        if stats:
            stats.total_tests += 1
            score = (correct_answers / 10) * 100

            if level == "junior":
                stats.junior_avg_score = (
                    stats.junior_avg_score * (stats.total_tests - 1) + score
                ) / stats.total_tests
            elif level == "middle":
                stats.middle_avg_score = (
                    stats.middle_avg_score * (stats.total_tests - 1) + score
                ) / stats.total_tests
            else:
                stats.senior_avg_score = (
                    stats.senior_avg_score * (stats.total_tests - 1) + score
                ) / stats.total_tests

            stats.best_score = max(stats.best_score, score)
            stats.last_test_date = datetime.utcnow()

        db.commit()

        percentage = (correct_answers / 10) * 100
        grade = "üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞:\n\n"

        if percentage >= 90:
            grade += "üèÜ –ü—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω–æ! –í—ã –Ω–∞—Å—Ç–æ—è—â–∏–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª!"
        elif percentage >= 70:
            grade += "üëç –•–æ—Ä–æ—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç! –ï—Å—Ç—å –Ω–µ–±–æ–ª—å—à–∏–µ –ø—Ä–æ–±–µ–ª—ã –≤ –∑–Ω–∞–Ω–∏—è—Ö."
        elif percentage >= 50:
            grade += "üìö –í–∞–º —Å—Ç–æ–∏—Ç –±–æ–ª—å—à–µ –ø—Ä–∞–∫—Ç–∏–∫–æ–≤–∞—Ç—å—Å—è."
        else:
            grade += "üí™ –ù–µ –æ—Ç—á–∞–∏–≤–∞–π—Ç–µ—Å—å, –ø—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —É—á–∏—Ç—å—Å—è!"

        stats_text = (
            f"\n\nüìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
            f"–£—Ä–æ–≤–µ–Ω—å: {level.capitalize()}\n"
            f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {correct_answers}/10 ({percentage:.1f}%)\n"
            f"–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ: {stats.total_tests}\n"
            f"–õ—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {stats.best_score:.1f}%\n"
            f"–°—Ä–µ–¥–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç ({level}): {getattr(stats, f'{level}_avg_score'):.1f}%"
        )

        keyboard = [
            [InlineKeyboardButton("üîÑ –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç —Å–Ω–æ–≤–∞", callback_data="start_test")],
            [InlineKeyboardButton("üìä –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤", callback_data="leaderboard")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        if update.callback_query:
            await update.callback_query.edit_message_text(
                text=grade + stats_text, reply_markup=reply_markup
            )
        else:
            await context.bot.send_message(
                chat_id=user_id, text=grade + stats_text, reply_markup=reply_markup
            )

    finally:
        db.close()


async def show_leaderboard(update: Update, context: ContextTypes.DEFAULT_TYPE):
    db = SessionLocal()
    try:
        # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        top_users = (
            db.query(UserStats)
            .filter(
                UserStats.total_tests > 0
            )  # –¢–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –ø—Ä–æ—à–µ–¥—à–∏–µ —Ö–æ—Ç—è –±—ã 1 —Ç–µ—Å—Ç
            .order_by(
                desc(
                    (
                        UserStats.junior_avg_score
                        + UserStats.middle_avg_score
                        + UserStats.senior_avg_score
                    )
                    / 3
                )
            )
            .limit(10)
            .all()
        )

        text = "üèÜ –†–µ–π—Ç–∏–Ω–≥ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n\n"
        text += "–†–µ–π—Ç–∏–Ω–≥ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –∫–∞–∫ —Å—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ\n–ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –≤—Å–µ—Ö —É—Ä–æ–≤–Ω–µ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏\n\n"

        for i, user in enumerate(top_users, 1):
            avg_rating = (
                user.junior_avg_score + user.middle_avg_score + user.senior_avg_score
            ) / 3
            text += (
                f"{i}. {user.username or f'User{user.user_id}'}\n"
                f"   üìä –†–µ–π—Ç–∏–Ω–≥: {avg_rating:.1f}%\n"
                f"   üìù –¢–µ—Å—Ç–æ–≤: {user.total_tests}\n\n"
            )

        if not top_users:
            text += "–ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –ø—Ä–æ—à–µ–ª –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ üò¢\n"
            text += "–°—Ç–∞–Ω—å—Ç–µ –ø–µ—Ä–≤—ã–º!\n"

        keyboard = [
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.callback_query.edit_message_text(
            text=text, reply_markup=reply_markup
        )

    finally:
        db.close()


async def show_my_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.callback_query.from_user.id
    db = SessionLocal()
    try:
        stats = db.query(UserStats).filter(UserStats.user_id == user_id).first()
        if not stats:
            text = "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ü—Ä–æ–π–¥–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ç–µ—Å—Ç!"
        else:
            text = (
                f"üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
                f"–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ: {stats.total_tests}\n"
                f"–°—Ä–µ–¥–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ —É—Ä–æ–≤–Ω—è–º:\n"
                f"üë∂ Junior: {stats.junior_avg_score:.1f}%\n"
                f"üë®‚Äçüíª Middle: {stats.middle_avg_score:.1f}%\n"
                f"üßô‚Äç‚ôÇÔ∏è Senior: {stats.senior_avg_score:.1f}%\n\n"
                f"–ü–æ—Å–ª–µ–¥–Ω–∏–π —Ç–µ—Å—Ç: {stats.last_test_date.strftime('%d.%m.%Y %H:%M')}"
            )

        keyboard = [
            [InlineKeyboardButton("üîÑ –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç", callback_data="start_test")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.callback_query.edit_message_text(
            text=text, reply_markup=reply_markup
        )

    finally:
        db.close()


async def show_help(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (
        "‚ÑπÔ∏è –ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:\n\n"
        "1. –ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:\n"
        "   ‚Ä¢ –ù–∞–∂–º–∏—Ç–µ 'üéØ –ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ'\n"
        "   ‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ (Java –∏–ª–∏ Python)\n"
        "   ‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏\n"
        "   ‚Ä¢ –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ 10 –≤–æ–ø—Ä–æ—Å–æ–≤\n\n"
        "2. –£—Ä–æ–≤–Ω–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —è–∑—ã–∫–∞:\n"
        "   üë∂ Junior - –±–∞–∑–æ–≤—ã–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏\n"
        "   üë®‚Äçüíª Middle - –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ —Ç–µ–º—ã\n"
        "   üßô‚Äç‚ôÇÔ∏è Senior - –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –∏ –ø–∞—Ç—Ç–µ—Ä–Ω—ã\n\n"
        "3. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        "   ‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–∏—á–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏\n"
        "   ‚Ä¢ –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤\n"
        "   ‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è\n\n"
        "4. –ù–∞–≤–∏–≥–∞—Ü–∏—è:\n"
        "   ‚Ä¢ –ö–Ω–æ–ø–∫–∞ 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é' –¥–æ—Å—Ç—É–ø–Ω–∞ –≤–µ–∑–¥–µ\n"
        "   ‚Ä¢ –ú–æ–∂–Ω–æ –ø—Ä–µ—Ä–≤–∞—Ç—å —Ç–µ—Å—Ç –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç\n\n"
        "–£–¥–∞—á–∏ –≤ –∏–∑—É—á–µ–Ω–∏–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è! üöÄ"
    )

    keyboard = [[InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.callback_query.edit_message_text(text=text, reply_markup=reply_markup)


def main():
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    create_tables()

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞
    application = Application.builder().token(TOKEN).build()

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(
        CallbackQueryHandler(show_language_selection, pattern="^start_test$")
    )
    application.add_handler(
        CallbackQueryHandler(handle_language_selection, pattern="^lang_")
    )
    application.add_handler(
        CallbackQueryHandler(handle_level_selection, pattern="^level_")
    )
    application.add_handler(CallbackQueryHandler(handle_answer, pattern="^answer_"))
    application.add_handler(CallbackQueryHandler(main_menu, pattern="^main_menu$"))
    application.add_handler(
        CallbackQueryHandler(show_leaderboard, pattern="^leaderboard$")
    )
    application.add_handler(CallbackQueryHandler(show_my_stats, pattern="^my_stats$"))
    application.add_handler(CallbackQueryHandler(show_help, pattern="^help$"))

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    application.run_polling(allowed_updates=Update.ALL_TYPES)


if __name__ == "__main__":
    main()
