import logging
import asyncio
import random
import os
from contextlib import contextmanager
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
    ConversationHandler,
    MessageHandler,
    filters,
)
from database import create_tables, get_db, Question, UserProgress, UserStats
from sqlalchemy import select, desc, func
from datetime import datetime

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –∏–∑ custom_tests
from custom_tests import (
    start_test_creation,
    ask_test_name,
    ask_question,
    ask_option_1,
    ask_option_2,
    ask_option_3,
    ask_option_4,
    ask_correct_option,
    confirm_add_question,
    cancel_creation,
    show_test_catalog,
    # –°–æ—Å—Ç–æ—è–Ω–∏—è
    ASK_TEST_NAME,
    ASK_QUESTION,
    ASK_OPTION_1,
    ASK_OPTION_2,
    ASK_OPTION_3,
    ASK_OPTION_4,
    ASK_CORRECT_OPTION,
    CONFIRM_ADD_QUESTION,
    # –î–æ–±–∞–≤–ª—è–µ–º run_custom_test
    run_custom_test,
    # –î–æ–±–∞–≤–ª—è–µ–º handle_custom_answer
    handle_custom_answer,
)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.getenv("BOT_TOKEN")

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
LANGUAGE_DISPLAY = {"python": "Python", "sql": "SQL", "java": "Java"}


async def main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE, message=None):
    keyboard = [
        [InlineKeyboardButton("üéØ –ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", callback_data="start_test")],
        [InlineKeyboardButton("üìù –°–æ–∑–¥–∞—Ç—å —Å–≤–æ–π —Ç–µ—Å—Ç", callback_data="create_test")],
        [InlineKeyboardButton("üìö –ö–∞—Ç–∞–ª–æ–≥ —Ç–µ—Å—Ç–æ–≤", callback_data="test_catalog")],
        [InlineKeyboardButton("üìä –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤", callback_data="leaderboard")],
        [InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    text = message or (
        "üéØ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Quiz Bot!\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è Java, Python –∏ SQL –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —É—Ä–æ–≤–Ω—è—Ö —Å–ª–æ–∂–Ω–æ—Å—Ç–∏.\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:"
    )

    if update.callback_query:
        await update.callback_query.edit_message_text(
            text=text, reply_markup=reply_markup
        )
    else:
        await update.message.reply_text(text=text, reply_markup=reply_markup)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await main_menu(update, context)


async def show_language_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("Java", callback_data="lang_java")],
        [InlineKeyboardButton("Python", callback_data="lang_python")],
        [InlineKeyboardButton("SQL", callback_data="lang_sql")],
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.callback_query.edit_message_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=reply_markup
    )


async def handle_language_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    context.user_data["selected_language"] = query.data.split("_")[1]

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Ä–æ–≤–Ω–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞
    await show_difficulty_levels(update, context)


async def show_difficulty_levels(update: Update, context: ContextTypes.DEFAULT_TYPE):
    selected_language = context.user_data.get("selected_language", "java")
    lang_prefix = LANGUAGE_DISPLAY.get(selected_language, "Java")

    keyboard = [
        [
            InlineKeyboardButton(
                f"üë∂ {lang_prefix} Junior",
                callback_data=f"level_{selected_language}_junior",
            )
        ],
        [
            InlineKeyboardButton(
                f"üë®‚Äçüíª {lang_prefix} Middle",
                callback_data=f"level_{selected_language}_middle",
            )
        ],
        [
            InlineKeyboardButton(
                f"üßô‚Äç‚ôÇÔ∏è {lang_prefix} Senior",
                callback_data=f"level_{selected_language}_senior",
            )
        ],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="start_test")],
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.callback_query.edit_message_text(
        f"–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è {lang_prefix}:", reply_markup=reply_markup
    )


async def handle_level_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –∏ —É—Ä–æ–≤–µ–Ω—å –∏–∑ callback_data
    _, language, level = query.data.split("_")
    user_id = query.from_user.id
    username = query.from_user.username or f"User{user_id}"
    level_key = f"{level}_{language}"

    with get_db() as db:
        # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å
        db.query(UserProgress).filter(UserProgress.user_id == user_id).delete()

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞ –∏ —É—Ä–æ–≤–Ω—è
        questions = db.query(Question).filter(Question.level == level_key).all()

        # –í—ã–±–∏—Ä–∞–µ–º 10 —Å–ª—É—á–∞–π–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
        selected_questions = random.sample(questions, min(10, len(questions)))
        selected_question_ids = [q.id for q in selected_questions]

        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏
        progress = UserProgress(
            user_id=user_id,
            level=level_key,
            is_testing=True,
            question_ids=",".join(map(str, selected_question_ids)),
        )
        db.add(progress)

        # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        stats = db.query(UserStats).filter(UserStats.user_id == user_id).first()
        if not stats:
            stats = UserStats(user_id=user_id, username=username)
            db.add(stats)

        db.commit()

    lang_name = LANGUAGE_DISPLAY.get(language, "Java")

    await query.edit_message_text(
        f"üìö –í—ã –≤—ã–±—Ä–∞–ª–∏ {lang_name}, —É—Ä–æ–≤–µ–Ω—å: {level.capitalize()}\n"
        "–ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ! –£–¥–∞—á–∏! üçÄ\n\n"
        "–í—Å–µ–≥–æ –±—É–¥–µ—Ç 10 –≤–æ–ø—Ä–æ—Å–æ–≤. –ù–∞ –∫–∞–∂–¥—ã–π –≤–æ–ø—Ä–æ—Å –¥–∞–µ—Ç—Å—è 4 –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞."
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
    await send_question(update, context, user_id)


async def get_question_message(question, progress):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–æ–ø—Ä–æ—Å–æ–º"""
    return (
        f"‚ùì –í–æ–ø—Ä–æ—Å {progress.current_question + 1}/10:\n\n"
        f"{question.question_text}\n\n"
        f"–í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤:\n"
        f"1Ô∏è‚É£ {question.option1}\n"
        f"2Ô∏è‚É£ {question.option2}\n"
        f"3Ô∏è‚É£ {question.option3}\n"
        f"4Ô∏è‚É£ {question.option4}"
    )


async def send_question(
    update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int
):
    with get_db() as db:
        progress = (
            db.query(UserProgress).filter(UserProgress.user_id == user_id).first()
        )
        if not progress or not progress.is_testing:
            return

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ ID –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
        question_ids = list(map(int, progress.question_ids.split(",")))
        if progress.current_question >= len(question_ids):
            # –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω
            await finish_test(update, context, user_id, progress.correct_answers)
            return

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å –ø–æ –µ–≥–æ ID
        current_question_id = question_ids[progress.current_question]
        question = db.query(Question).filter(Question.id == current_question_id).first()

        # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å –≤–æ–ø—Ä–æ—Å–æ–º
        message_text = await get_question_message(question, progress)

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å –Ω–æ–º–µ—Ä–∞–º–∏
        keyboard = [
            [
                InlineKeyboardButton("1Ô∏è‚É£", callback_data="answer_1"),
                InlineKeyboardButton("2Ô∏è‚É£", callback_data="answer_2"),
                InlineKeyboardButton("3Ô∏è‚É£", callback_data="answer_3"),
                InlineKeyboardButton("4Ô∏è‚É£", callback_data="answer_4"),
            ],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–æ–ø—Ä–æ—Å–æ–º
        await context.bot.send_message(
            chat_id=user_id, text=message_text, reply_markup=reply_markup
        )


async def handle_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    user_id = query.from_user.id
    selected_option = int(query.data.split("_")[1])

    with get_db() as db:
        progress = (
            db.query(UserProgress).filter(UserProgress.user_id == user_id).first()
        )
        if not progress or not progress.is_testing:
            return

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ ID –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
        question_ids = list(map(int, progress.question_ids.split(",")))
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å –ø–æ –µ–≥–æ ID
        current_question_id = question_ids[progress.current_question]
        question = db.query(Question).filter(Question.id == current_question_id).first()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞
        is_correct = question.correct_option == selected_option
        correct_answer_text = getattr(question, f"option{question.correct_option}")
        selected_answer_text = getattr(question, f"option{selected_option}")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        question_text = await get_question_message(question, progress)

        if is_correct:
            progress.correct_answers += 1
            feedback = (
                f"{question_text}\n\n"
                "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!\n\n"
                f"–í–∞—à –æ—Ç–≤–µ—Ç: {selected_answer_text}"
            )
        else:
            feedback = (
                f"{question_text}\n\n"
                "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ!\n\n"
                f"–í–∞—à –æ—Ç–≤–µ—Ç: {selected_answer_text}\n"
                f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_answer_text}"
            )

        progress.current_question += 1
        progress.last_answer_time = datetime.utcnow()
        db.commit()

    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —É–±–∏—Ä–∞—è –∫–Ω–æ–ø–∫–∏ –∏ –ø–æ–∫–∞–∑—ã–≤–∞—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    await query.edit_message_text(text=feedback)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –≤ –Ω–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
    await send_question(update, context, user_id)


async def finish_test(
    update: Update,
    context: ContextTypes.DEFAULT_TYPE,
    user_id: int,
    correct_answers: int,
):
    # –û–±—ä—è–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–∞ –ø—Ä–µ–¥–µ–ª–∞–º–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    level = ""
    mmr_change = 0
    old_mmr = 0
    new_mmr = 0

    with get_db() as db:
        progress = (
            db.query(UserProgress).filter(UserProgress.user_id == user_id).first()
        )
        if not progress:
            return

        level = progress.level
        progress.is_testing = False

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        stats = db.query(UserStats).filter(UserStats.user_id == user_id).first()
        if stats:
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ MMR
            mmr_change = stats.calculate_mmr_change(correct_answers, level)
            old_mmr = stats.mmr
            stats.mmr = max(
                0, stats.mmr + mmr_change
            )  # MMR –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º
            new_mmr = stats.mmr  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π MMR –≤ –ª–æ–∫–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
            stats.total_tests += 1
            stats.last_test_date = datetime.utcnow()

        db.commit()

    percentage = (correct_answers / 10) * 100

    # –û—Ü–µ–Ω–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    if percentage >= 90:
        grade = "üèÜ –ü—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω–æ! –í—ã –Ω–∞—Å—Ç–æ—è—â–∏–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª!"
    elif percentage >= 70:
        grade = "üëç –•–æ—Ä–æ—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç! –ï—Å—Ç—å –Ω–µ–±–æ–ª—å—à–∏–µ –ø—Ä–æ–±–µ–ª—ã –≤ –∑–Ω–∞–Ω–∏—è—Ö."
    elif percentage >= 50:
        grade = "üìö –í–∞–º —Å—Ç–æ–∏—Ç –±–æ–ª—å—à–µ –ø—Ä–∞–∫—Ç–∏–∫–æ–≤–∞—Ç—å—Å—è."
    else:
        grade = "üí™ –ù–µ –æ—Ç—á–∞–∏–≤–∞–π—Ç–µ—Å—å, –ø—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —É—á–∏—Ç—å—Å—è!"

    # –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    display_level = level.split("_")[0] if "_" in level else level

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ MMR
    mmr_text = "üî∫" if mmr_change > 0 else "üîª" if mmr_change < 0 else "‚ûñ"
    stats_text = (
        f"\n\n–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞:\n"
        f"–£—Ä–æ–≤–µ–Ω—å: {display_level.capitalize()}\n"
        f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {correct_answers}/10 ({percentage:.1f}%)\n"
        f"MMR: {old_mmr} {mmr_text} {abs(mmr_change)} = {new_mmr}\n"
    )

    # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –±–µ–∑ –∫–Ω–æ–ø–æ–∫
    try:
        await context.bot.send_message(
            chat_id=user_id, text=f"üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞:\n\n{grade}{stats_text}"
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}")

    # –ó–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    keyboard = [
        [InlineKeyboardButton("üîÑ –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç —Å–Ω–æ–≤–∞", callback_data="start_test")],
        [InlineKeyboardButton("üìä –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤", callback_data="leaderboard")],
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await context.bot.send_message(
        chat_id=user_id, text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup
    )


async def show_leaderboard(update: Update, context: ContextTypes.DEFAULT_TYPE):
    with get_db() as db:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø-5 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ MMR
        top_users = (
            db.query(UserStats)
            .filter(UserStats.total_tests > 0)
            .order_by(desc(UserStats.mmr))
            .limit(5)
            .all()
        )

    text = "üèÜ –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤\n\n"
    medals = ["ü•á", "ü•à", "ü•â", "4Ô∏è‚É£", "5Ô∏è‚É£"]
    ranks = ["–ì—Ä–∞–Ω–¥–º–∞—Å—Ç–µ—Ä", "–ú–∞—Å—Ç–µ—Ä", "–≠–∫—Å–ø–µ—Ä—Ç", "–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç", "–ù–æ–≤–∏—á–æ–∫"]

    for i, user in enumerate(top_users):
        medal = medals[i]
        rank = ranks[i] if user.mmr >= 1000 else "–ù–æ–≤–∏—á–æ–∫"
        username = user.username or f"User{user.user_id}"

        # –î–æ–±–∞–≤–ª—è–µ–º –∑–≤–µ–∑–¥–æ—á–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç MMR
        stars = "‚≠ê" * (user.mmr // 200)  # 1 –∑–≤–µ–∑–¥–∞ –∑–∞ –∫–∞–∂–¥—ã–µ 200 MMR

        text += (
            f"{medal} {username}\n"
            f"    {stars}\n"
            f"    –†–∞–Ω–≥: {rank}\n"
            f"    MMR: {user.mmr}\n"
            f"    –¢–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ: {user.total_tests}\n\n"
        )

    if not top_users:
        text += "üò¢ –ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –ø—Ä–æ—à–µ–ª –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞\n"
        text += "üéØ –°—Ç–∞–Ω—å—Ç–µ –ø–µ—Ä–≤—ã–º –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ!\n"

    keyboard = [
        [InlineKeyboardButton("üîÑ –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç", callback_data="start_test")],
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.callback_query.edit_message_text(text=text, reply_markup=reply_markup)


async def show_help(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (
        "‚ÑπÔ∏è –ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:\n\n"
        "1. –ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:\n"
        "   ‚Ä¢ –ù–∞–∂–º–∏—Ç–µ 'üéØ –ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ'\n"
        "   ‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ (Java, Python –∏–ª–∏ SQL)\n"
        "   ‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏\n"
        "   ‚Ä¢ –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ 10 –≤–æ–ø—Ä–æ—Å–æ–≤\n\n"
        "2. –£—Ä–æ–≤–Ω–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —è–∑—ã–∫–∞:\n"
        "   üë∂ Junior - –±–∞–∑–æ–≤—ã–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏\n"
        "   üë®‚Äçüíª Middle - –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ —Ç–µ–º—ã\n"
        "   üßô‚Äç‚ôÇÔ∏è Senior - –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –∏ –ø–∞—Ç—Ç–µ—Ä–Ω—ã\n\n"
        "3. –ù–∞–≤–∏–≥–∞—Ü–∏—è:\n"
        "   ‚Ä¢ –ö–Ω–æ–ø–∫–∞ 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é' –¥–æ—Å—Ç—É–ø–Ω–∞ –≤–µ–∑–¥–µ(–∫—Ä–æ–º–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)\n"
        "   ‚Ä¢ –ú–æ–∂–Ω–æ –ø—Ä–µ—Ä–≤–∞—Ç—å —Ç–µ—Å—Ç –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç\n\n"
        "–£–¥–∞—á–∏ –≤ –∏–∑—É—á–µ–Ω–∏–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è! üöÄ"
    )

    keyboard = [[InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.callback_query.edit_message_text(text=text, reply_markup=reply_markup)


def setup_handlers(application):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–∞
    conv_handler = ConversationHandler(
        entry_points=[
            CallbackQueryHandler(start_test_creation, pattern="^create_test$")
        ],
        states={
            ASK_TEST_NAME: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, ask_test_name)
            ],
            ASK_QUESTION: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, ask_question)
            ],
            ASK_OPTION_1: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, ask_option_1)
            ],
            ASK_OPTION_2: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, ask_option_2)
            ],
            ASK_OPTION_3: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, ask_option_3)
            ],
            ASK_OPTION_4: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, ask_option_4)
            ],
            ASK_CORRECT_OPTION: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, ask_correct_option)
            ],
            CONFIRM_ADD_QUESTION: [
                CallbackQueryHandler(
                    confirm_add_question, pattern="^(add_another_q|finish_creation)$"
                )
            ],
        },
        fallbacks=[CommandHandler("cancel", cancel_creation)],
        per_message=False,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–¥–∏–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    )

    application.add_handler(conv_handler)  # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∏–∞–ª–æ–≥–∞

    application.add_handler(CommandHandler("start", start))
    application.add_handler(
        CallbackQueryHandler(show_language_selection, pattern="^start_test$")
    )
    application.add_handler(
        CallbackQueryHandler(handle_language_selection, pattern="^lang_")
    )
    application.add_handler(
        CallbackQueryHandler(handle_level_selection, pattern="^level_")
    )
    application.add_handler(CallbackQueryHandler(handle_answer, pattern="^answer_"))
    application.add_handler(CallbackQueryHandler(main_menu, pattern="^main_menu$"))
    application.add_handler(
        CallbackQueryHandler(show_leaderboard, pattern="^leaderboard$")
    )
    application.add_handler(CallbackQueryHandler(show_help, pattern="^help$"))
    application.add_handler(
        CallbackQueryHandler(show_test_catalog, pattern="^test_catalog(?:_\d+)?$")
    )  # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–∞—Ç–∞–ª–æ–≥–∞
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞
    application.add_handler(
        CallbackQueryHandler(run_custom_test, pattern="^run_custom_")
    )
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –∫–∞—Å—Ç–æ–º–Ω—ã–π —Ç–µ—Å—Ç
    application.add_handler(
        CallbackQueryHandler(handle_custom_answer, pattern="^custom_answer_")
    )


def main():
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    create_tables()

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞
    application = Application.builder().token(TOKEN).build()

    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    setup_handlers(application)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    application.run_polling(allowed_updates=Update.ALL_TYPES)


if __name__ == "__main__":
    main()
