import logging
from telegram import (
    Update,
    ReplyKeyboardRemove,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
)
from telegram.ext import ContextTypes, ConversationHandler, CommandHandler
import json
import os
from datetime import datetime

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º get_db_session –∏ UserStats –∏–∑ database.py
from database import get_db, UserStats

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º main_menu –∏–∑ bot.py
# –≠—Ç–æ –º–æ–∂–µ—Ç —Å–æ–∑–¥–∞—Ç—å —Ü–∏–∫–ª –∏–º–ø–æ—Ä—Ç–∞, –µ—Å–ª–∏ bot.py —Ç–æ–∂–µ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç —á—Ç–æ-—Ç–æ –∏–∑ custom_tests.py
# –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –ø—Ä–æ–±–ª–µ–º—ã, –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏—Ç—å.
# from bot import main_menu # –£–±–∏—Ä–∞–µ–º –∏–º–ø–æ—Ä—Ç –æ—Ç—Å—é–¥–∞

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–∏–∞–ª–æ–≥–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–∞
(
    ASK_TEST_NAME,
    ASK_QUESTION,
    ASK_OPTION_1,
    ASK_OPTION_2,
    ASK_OPTION_3,
    ASK_OPTION_4,
    ASK_CORRECT_OPTION,
    CONFIRM_ADD_QUESTION,
    FINISH_TEST_CREATION,
) = range(9)

# –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–∞—Å—Ç–æ–º–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
CUSTOM_TESTS_FILE = "asuTgQuizBot/custom_tests.json"
TESTS_PER_PAGE = 5  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ—Å—Ç–æ–≤ –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∫–∞—Ç–∞–ª–æ–≥–∞

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ö—Ä–∞–Ω–∏–ª–∏—â–µ–º —Ç–µ—Å—Ç–æ–≤ ---


def load_custom_tests():
    if not os.path.exists(CUSTOM_TESTS_FILE):
        return {}
    try:
        with open(CUSTOM_TESTS_FILE, "r", encoding="utf-8") as f:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ, –ø—Ä–µ–æ–±—Ä–∞–∑—É—è –∫–ª—é—á–∏ (user_id) –∏–∑ —Å—Ç—Ä–æ–∫ –≤ int
            data = json.load(f)
            return {int(k): v for k, v in data.items()}
    except (json.JSONDecodeError, FileNotFoundError):
        return {}  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å, –µ—Å–ª–∏ —Ñ–∞–π–ª –ø—É—Å—Ç, –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω


def save_custom_tests(tests_data):
    with open(CUSTOM_TESTS_FILE, "w", encoding="utf-8") as f:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ, –∫–ª—é—á–∏ (user_id) –æ—Å—Ç–∞—é—Ç—Å—è int, json –∏—Ö –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –≤ —Å—Ç—Ä–æ–∫–∏
        json.dump(tests_data, f, ensure_ascii=False, indent=4)


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –∫–∞—Å—Ç–æ–º–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ (user_id -> list of tests)
# –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ—Å—Ç—ã –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
custom_tests_storage = load_custom_tests()


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è ConversationHandler ---


async def start_test_creation(
    update: Update, context: ContextTypes.DEFAULT_TYPE
) -> int:
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ç–µ—Å—Ç–∞, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ."""
    await update.callback_query.answer()
    await update.callback_query.edit_message_text(
        "–û—Ç–ª–∏—á–Ω–æ! –î–∞–≤–∞–π—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º –Ω–æ–≤—ã–π —Ç–µ—Å—Ç. \n\nüìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ —Ç–µ—Å—Ç–∞:"
    )
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ç–µ—Å—Ç–∞ –≤ user_data
    context.user_data["new_test"] = {"name": None, "questions": []}
    return ASK_TEST_NAME


async def ask_test_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å."""
    test_name = update.message.text
    if not test_name or len(test_name) < 3:
        await update.message.reply_text(
            "–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 3 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
        )
        return ASK_TEST_NAME

    context.user_data["new_test"]["name"] = test_name
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
    context.user_data["current_question"] = {}
    await update.message.reply_text(
        f"–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞ '{test_name}' –ø—Ä–∏–Ω—è—Ç–æ.\n\n"
        "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø–µ—Ä–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞:"
    )
    return ASK_QUESTION


async def ask_question(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ–∫—Å—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ (–µ—Å–ª–∏ –æ–Ω –±—ã–ª) –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –≤–∞—Ä–∏–∞–Ω—Ç–∞ 1."""
    question_text = update.message.text
    if not question_text or len(question_text) < 5:
        await update.message.reply_text(
            "–¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 5 —Å–∏–º–≤–æ–ª–æ–≤. –í–≤–µ–¥–∏—Ç–µ –µ—â–µ —Ä–∞–∑:"
        )
        return ASK_QUESTION  # –û—Å—Ç–∞–µ–º—Å—è –≤ —Ç–æ–º –∂–µ —Å–æ—Å—Ç–æ—è–Ω–∏–∏

    context.user_data["current_question"]["text"] = question_text
    await update.message.reply_text(
        "–í–æ–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞ (1Ô∏è‚É£):"
    )
    return ASK_OPTION_1


async def ask_option_1(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç 1 –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç 2."""
    option1_text = update.message.text
    if not option1_text:
        await update.message.reply_text(
            "–í–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –≤–∞—Ä–∏–∞–Ω—Ç–∞ 1Ô∏è‚É£:"
        )
        return ASK_OPTION_1

    context.user_data["current_question"]["option1"] = option1_text
    await update.message.reply_text(
        "–í–∞—Ä–∏–∞–Ω—Ç 1 –ø—Ä–∏–Ω—è—Ç. –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞ (2Ô∏è‚É£):"
    )
    return ASK_OPTION_2


async def ask_option_2(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç 2 –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç 3."""
    option2_text = update.message.text
    if not option2_text:
        await update.message.reply_text(
            "–í–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –≤–∞—Ä–∏–∞–Ω—Ç–∞ 2Ô∏è‚É£:"
        )
        return ASK_OPTION_2

    context.user_data["current_question"]["option2"] = option2_text
    await update.message.reply_text(
        "–í–∞—Ä–∏–∞–Ω—Ç 2 –ø—Ä–∏–Ω—è—Ç. –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ç—Ä–µ—Ç—å–µ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞ (3Ô∏è‚É£):"
    )
    return ASK_OPTION_3


async def ask_option_3(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç 3 –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç 4."""
    option3_text = update.message.text
    if not option3_text:
        await update.message.reply_text(
            "–í–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –≤–∞—Ä–∏–∞–Ω—Ç–∞ 3Ô∏è‚É£:"
        )
        return ASK_OPTION_3

    context.user_data["current_question"]["option3"] = option3_text
    await update.message.reply_text(
        "–í–∞—Ä–∏–∞–Ω—Ç 3 –ø—Ä–∏–Ω—è—Ç. –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —á–µ—Ç–≤–µ—Ä—Ç–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞ (4Ô∏è‚É£):"
    )
    return ASK_OPTION_4


async def ask_option_4(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç 4 –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –Ω–æ–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞."""
    option4_text = update.message.text
    if not option4_text:
        await update.message.reply_text(
            "–í–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –≤–∞—Ä–∏–∞–Ω—Ç–∞ 4Ô∏è‚É£:"
        )
        return ASK_OPTION_4

    context.user_data["current_question"]["option4"] = option4_text
    await update.message.reply_text(
        "–í–∞—Ä–∏–∞–Ω—Ç 4 –ø—Ä–∏–Ω—è—Ç. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞ (–æ—Ç 1 –¥–æ 4):"
    )
    return ASK_CORRECT_OPTION


async def ask_correct_option(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–æ–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç, –¥–æ–±–∞–≤–∏—Ç—å –ª–∏ –µ—â–µ –≤–æ–ø—Ä–æ—Å."""
    try:
        correct_option = int(update.message.text)
        if not 1 <= correct_option <= 4:
            raise ValueError("–ù–æ–º–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 4.")
    except (ValueError, TypeError):
        await update.message.reply_text(
            "–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 4, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É –≤–∞—Ä–∏–∞–Ω—Ç—É:"
        )
        return ASK_CORRECT_OPTION

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥–æ—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –≤ —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ —Ç–µ—Å—Ç–∞
    current_q = context.user_data["current_question"]
    current_q["correct_option"] = correct_option
    context.user_data["new_test"]["questions"].append(current_q.copy())

    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
    context.user_data["current_question"] = {}

    keyboard = [
        [
            InlineKeyboardButton(
                "‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ –≤–æ–ø—Ä–æ—Å", callback_data="add_another_q"
            ),
            InlineKeyboardButton(
                "‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ", callback_data="finish_creation"
            ),
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        f"–í–æ–ø—Ä–æ—Å '{current_q['text'][:30]}...' –¥–æ–±–∞–≤–ª–µ–Ω. –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –æ–¥–∏–Ω –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞?",
        reply_markup=reply_markup,
    )
    return CONFIRM_ADD_QUESTION


async def confirm_add_question(
    update: Update, context: ContextTypes.DEFAULT_TYPE
) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å."""
    query = update.callback_query
    await query.answer()
    command = query.data

    if command == "add_another_q":
        await query.edit_message_text("–•–æ—Ä–æ—à–æ, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞:")
        return ASK_QUESTION
    elif command == "finish_creation":
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—é
        return await finish_test_creation(update, context)
    else:
        # –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –±—É–¥–µ—Ç –¥—Ä—É–≥–æ–π callback_data
        await query.edit_message_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.")
        return CONFIRM_ADD_QUESTION


async def finish_test_creation(
    update: Update, context: ContextTypes.DEFAULT_TYPE
) -> int:
    """–ó–∞–≤–µ—Ä—à–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞, —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–≥–æ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_id = update.callback_query.from_user.id
    username = (
        update.callback_query.from_user.username or f"User_{user_id}"
    )  # –°–æ—Ö—Ä–∞–Ω—è–µ–º username
    new_test_data = context.user_data.get("new_test")

    if not new_test_data or not new_test_data.get("questions"):
        await update.callback_query.edit_message_text(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ç–µ—Å—Ç–µ –∏–ª–∏ –≤–æ–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å –∑–∞–Ω–æ–≤–æ.",
            reply_markup=InlineKeyboardMarkup(
                [[InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]]
            ),  # –ö–Ω–æ–ø–∫–∞ –Ω–∞ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        )
        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        if "new_test" in context.user_data:
            del context.user_data["new_test"]
        if "current_question" in context.user_data:
            del context.user_data["current_question"]
        return ConversationHandler.END

    # –î–æ–±–∞–≤–ª—è–µ–º –∞–≤—Ç–æ—Ä–∞
    new_test_data["author_id"] = user_id
    new_test_data["author_username"] = username

    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    if user_id not in custom_tests_storage:
        custom_tests_storage[user_id] = []
    custom_tests_storage[user_id].append(new_test_data)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã –≤ —Ñ–∞–π–ª
    save_custom_tests(custom_tests_storage)

    await update.callback_query.edit_message_text(
        f"üéâ –¢–µ—Å—Ç '{new_test_data['name']}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω! –í –Ω–µ–º {len(new_test_data['questions'])} –≤–æ–ø—Ä–æ—Å–æ–≤.",
        reply_markup=InlineKeyboardMarkup(
            [[InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]]
        ),  # –ö–Ω–æ–ø–∫–∞ –Ω–∞ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    )

    # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    del context.user_data["new_test"]
    if "current_question" in context.user_data:
        del context.user_data["current_question"]

    return ConversationHandler.END


async def cancel_creation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–º–µ–Ω—è–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞
    from bot import main_menu

    query = update.callback_query
    message = update.message  # –ú–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã–∑–≤–∞–Ω–æ –∫–æ–º–∞–Ω–¥–æ–π /cancel

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –æ—Ç–∫—É–¥–∞ –ø—Ä–∏—à–ª–∞ –æ—Ç–º–µ–Ω–∞
    if query:
        await query.answer()
        await query.edit_message_text(
            "–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=None  # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–∏–∞–ª–æ–≥–∞
        )
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≥–ª–∞–≤–Ω—ã–º –º–µ–Ω—é
        await context.bot.send_message(
            chat_id=query.from_user.id,
            text="–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
        )
        # –°–æ–∑–¥–∞–µ–º —Ñ–µ–π–∫–æ–≤—ã–π update —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º –¥–ª—è main_menu
        fake_update = Update(
            update_id=0, message=query.message
        )  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ callback-–∞
        await main_menu(fake_update, context)  # –í—ã–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é

    elif message:
        await message.reply_text(
            "–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=ReplyKeyboardRemove()
        )
        await main_menu(update, context)  # –í—ã–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é

    # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    if "new_test" in context.user_data:
        del context.user_data["new_test"]
    if "current_question" in context.user_data:
        del context.user_data["current_question"]

    return ConversationHandler.END


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–∫–∞–∑–∞ –∫–∞—Ç–∞–ª–æ–≥–∞ ---


async def show_test_catalog(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∫–∞—Ç–∞–ª–æ–≥ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π."""
    query = update.callback_query
    await query.answer()

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    current_page = 0
    if query.data and query.data.startswith("test_catalog_"):
        try:
            current_page = int(query.data.split("_")[-1])
        except (ValueError, IndexError):
            current_page = 0

    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã –≤ –æ–¥–∏–Ω —Å–ø–∏—Å–æ–∫
    all_tests_flat = []
    for author_id, tests in custom_tests_storage.items():
        for index, test in enumerate(tests):
            test_info = test.copy()  # –ö–æ–ø–∏—Ä—É–µ–º, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å author_id –∏ index
            test_info["author_id"] = author_id
            test_info["test_index"] = index
            all_tests_flat.append(test_info)

    if not all_tests_flat:
        await query.edit_message_text(
            "–ö–∞—Å—Ç–æ–º–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç. üò¢\n–ù–∞–∂–º–∏—Ç–µ 'üìù –°–æ–∑–¥–∞—Ç—å —Å–≤–æ–π —Ç–µ—Å—Ç', —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–≤—ã–π!",
            reply_markup=InlineKeyboardMarkup(
                [[InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]]
            ),
        )
        return

    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
    total_tests = len(all_tests_flat)
    start_index = current_page * TESTS_PER_PAGE
    end_index = start_index + TESTS_PER_PAGE
    tests_on_page = all_tests_flat[start_index:end_index]
    total_pages = (total_tests + TESTS_PER_PAGE - 1) // TESTS_PER_PAGE

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∏ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    test_list_text = ""
    keyboard = []
    for test in tests_on_page:
        author_id = test["author_id"]
        index = test["test_index"]
        author_name = test.get("author_username", f"User_{author_id}")
        test_name = test.get("name", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
        num_questions = len(test.get("questions", []))
        callback_data = f"run_custom_{author_id}_{index}"

        test_list_text += f"\nüîπ '{test_name}' –æ—Ç {author_name} ({num_questions} –≤–æ–ø—Ä.)"
        keyboard.append(
            [
                InlineKeyboardButton(
                    f"‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å '{test_name}'", callback_data=callback_data
                )
            ]
        )

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    pagination_buttons = []
    if current_page > 0:
        pagination_buttons.append(
            InlineKeyboardButton(
                "‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"test_catalog_{current_page - 1}"
            )
        )
    if end_index < total_tests:
        pagination_buttons.append(
            InlineKeyboardButton(
                "–í–ø–µ—Ä–µ–¥ ‚ñ∂Ô∏è", callback_data=f"test_catalog_{current_page + 1}"
            )
        )

    if pagination_buttons:
        keyboard.append(pagination_buttons)

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
    keyboard.append(
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    )

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π —Ç–µ–∫—Å—Ç
    text = f"üìö –ö–∞—Ç–∞–ª–æ–≥ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ (–°—Ç—Ä–∞–Ω–∏—Ü–∞ {current_page + 1}/{total_pages}):{test_list_text}"
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text(text, reply_markup=reply_markup)


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ ---


async def run_custom_test(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –∫–∞—Å—Ç–æ–º–Ω—ã–π —Ç–µ—Å—Ç."""
    query = update.callback_query
    await query.answer()
    callback_data = query.data
    user_id = query.from_user.id

    try:
        _, _, author_id_str, test_index_str = callback_data.split("_")
        author_id = int(author_id_str)
        test_index = int(test_index_str)

        # –ù–∞—Ö–æ–¥–∏–º —Ç–µ—Å—Ç –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        test_data = custom_tests_storage.get(author_id, [])[test_index]
        test_name = test_data.get("name", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
        questions = test_data.get("questions", [])

        if not questions:
            await query.edit_message_text(
                f"‚ùå –¢–µ—Å—Ç '{test_name}' –ø—É—Å—Ç (–Ω–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤).",
                reply_markup=InlineKeyboardMarkup(
                    [
                        [
                            InlineKeyboardButton(
                                "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∫–∞—Ç–∞–ª–æ–≥", callback_data="test_catalog"
                            )
                        ]
                    ]
                ),
            )
            return

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–µ—Å—Ç–∞ –≤ user_data
        context.user_data["custom_test"] = {
            "name": test_name,
            "questions": questions,
            "current_question_index": 0,
            "correct_answers": 0,
            "total_questions": len(questions),
        }

        await query.edit_message_text(
            f"üìö –ù–∞—á–∏–Ω–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π —Ç–µ—Å—Ç '{test_name}'!\n"
            f"–í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {len(questions)}. –£–¥–∞—á–∏! üçÄ"
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
        await send_custom_question(update, context, user_id)

    except (ValueError, IndexError, KeyError) as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ ({callback_data}): {e}")
        await query.edit_message_text(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–ª–∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–µ—Å—Ç. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –±—ã–ª —É–¥–∞–ª–µ–Ω.",
            reply_markup=InlineKeyboardMarkup(
                [
                    [
                        InlineKeyboardButton(
                            "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∫–∞—Ç–∞–ª–æ–≥", callback_data="test_catalog"
                        )
                    ]
                ]
            ),
        )


async def send_custom_question(
    update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int
):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞."""
    test_state = context.user_data.get("custom_test")
    if not test_state:
        logging.warning(
            f"–ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞—Å—Ç–æ–º–Ω—ã–π –≤–æ–ø—Ä–æ—Å –±–µ–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ç–µ—Å—Ç–∞ –¥–ª—è user_id={user_id}"
        )
        # –í–æ–∑–º–æ–∂–Ω–æ, —Å—Ç–æ–∏—Ç –≤–µ—Ä–Ω—É—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–∞—Ç–∞–ª–æ–≥ –∏–ª–∏ –º–µ–Ω—é
        return

    current_index = test_state["current_question_index"]
    total_questions = test_state["total_questions"]

    if current_index >= total_questions:
        # –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω
        await finish_custom_test(update, context, user_id)
        return

    question_data = test_state["questions"][current_index]

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞
    question_text = (
        f"‚ùì –í–æ–ø—Ä–æ—Å {current_index + 1}/{total_questions}:\n\n"
        f"{question_data['text']}\n\n"
        f"–í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤:\n"
        f"1Ô∏è‚É£ {question_data['option1']}\n"
        f"2Ô∏è‚É£ {question_data['option2']}\n"
        f"3Ô∏è‚É£ {question_data['option3']}\n"
        f"4Ô∏è‚É£ {question_data['option4']}"
    )

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤
    keyboard = [
        [
            InlineKeyboardButton("1Ô∏è‚É£", callback_data="custom_answer_1"),
            InlineKeyboardButton("2Ô∏è‚É£", callback_data="custom_answer_2"),
            InlineKeyboardButton("3Ô∏è‚É£", callback_data="custom_answer_3"),
            InlineKeyboardButton("4Ô∏è‚É£", callback_data="custom_answer_4"),
        ],
        # TODO: –î–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã/–≤—ã—Ö–æ–¥–∞ –∏–∑ —Ç–µ—Å—Ç–∞?
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å –Ω–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    await context.bot.send_message(
        chat_id=user_id, text=question_text, reply_markup=reply_markup
    )


async def handle_custom_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –≤–æ–ø—Ä–æ—Å –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞."""
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    selected_option = int(query.data.split("_")[2])  # custom_answer_X

    test_state = context.user_data.get("custom_test")
    if not test_state:
        logging.warning(
            f"–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –Ω–∞ –∫–∞—Å—Ç–æ–º–Ω—ã–π —Ç–µ—Å—Ç –±–µ–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ç–µ—Å—Ç–∞ –¥–ª—è user_id={user_id}"
        )
        await query.edit_message_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–µ—Å—Ç–∞ –ø–æ—Ç–µ—Ä—è–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ."
        )
        # TODO: –í–µ—Ä–Ω—É—Ç—å –≤ –º–µ–Ω—é/–∫–∞—Ç–∞–ª–æ–≥
        return

    current_index = test_state["current_question_index"]
    if current_index >= test_state["total_questions"]:
        logging.warning(f"–ü–æ–ª—É—á–µ–Ω –ª–∏—à–Ω–∏–π –æ—Ç–≤–µ—Ç –Ω–∞ –∫–∞—Å—Ç–æ–º–Ω—ã–π —Ç–µ—Å—Ç –¥–ª—è user_id={user_id}")
        await query.edit_message_text("–¢–µ—Å—Ç —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω.")
        return  # –¢–µ—Å—Ç —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω

    question_data = test_state["questions"][current_index]
    correct_option = question_data["correct_option"]
    is_correct = selected_option == correct_option

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
    total_questions = test_state["total_questions"]
    question_text_feedback = (
        f"‚ùì –í–æ–ø—Ä–æ—Å {current_index + 1}/{total_questions}:\n\n"
        f"{question_data['text']}\n\n"
        f"–í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤:\n"
        f"1Ô∏è‚É£ {question_data['option1']}\n"
        f"2Ô∏è‚É£ {question_data['option2']}\n"
        f"3Ô∏è‚É£ {question_data['option3']}\n"
        f"4Ô∏è‚É£ {question_data['option4']}"
    )

    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å
    selected_answer_text = question_data.get(
        f"option{selected_option}", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç"
    )
    if is_correct:
        test_state["correct_answers"] += 1
        feedback = (
            f"{question_text_feedback}\n\n"
            "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!\n\n"
            f"–í–∞—à –æ—Ç–≤–µ—Ç: {selected_answer_text}"
        )
    else:
        correct_answer_text = question_data.get(
            f"option{correct_option}", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç"
        )
        feedback = (
            f"{question_text_feedback}\n\n"
            "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ!\n\n"
            f"–í–∞—à –æ—Ç–≤–µ—Ç: {selected_answer_text}\n"
            f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_answer_text}"
        )

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–æ–ø—Ä–æ—Å–æ–º, —É–±–∏—Ä–∞—è –∫–Ω–æ–ø–∫–∏ –∏ –ø–æ–∫–∞–∑—ã–≤–∞—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    await query.edit_message_text(text=feedback, reply_markup=None)

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
    test_state["current_question_index"] += 1
    await send_custom_question(update, context, user_id)


async def finish_custom_test(
    update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int
):
    """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –∫–∞—Å—Ç–æ–º–Ω—ã–π —Ç–µ—Å—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç MMR."""
    test_state = context.user_data.get("custom_test")
    if not test_state:
        logging.warning(
            f"–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–∏—Ç—å –∫–∞—Å—Ç–æ–º–Ω—ã–π —Ç–µ—Å—Ç –±–µ–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è user_id={user_id}"
        )
        return

    correct_answers = test_state["correct_answers"]
    total_questions = test_state["total_questions"]
    test_name = test_state["name"]
    username = update.effective_user.username or f"User_{user_id}"

    percentage = (correct_answers / total_questions) * 100 if total_questions > 0 else 0

    # --- –†–∞—Å—á–µ—Ç –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ MMR ---
    mmr_change = 0
    new_mmr = 0
    old_mmr = 0
    stats_text = ""
    try:
        with get_db() as db:
            stats = db.query(UserStats).filter(UserStats.user_id == user_id).first()
            if not stats:
                # –°–æ–∑–¥–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É, –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç
                stats = UserStats(user_id=user_id, username=username)
                db.add(stats)
                db.flush()  # –ü–æ–ª—É—á–∞–µ–º ID –∏ –Ω–∞—á–∞–ª—å–Ω—ã–π MMR

            if stats:
                old_mmr = stats.mmr
                mmr_change = stats.calculate_mmr_change_custom(
                    correct_answers, total_questions
                )
                stats.mmr = max(
                    0, stats.mmr + mmr_change
                )  # MMR –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º
                stats.total_tests += 1
                stats.last_test_date = datetime.utcnow()
                stats.username = username  # –û–±–Ω–æ–≤–ª—è–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
                new_mmr = stats.mmr
                db.commit()

                # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ MMR
                mmr_symbol = (
                    "üî∫" if mmr_change > 0 else "üîª" if mmr_change < 0 else "‚ûñ"
                )
                stats_text = f"\n\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\nMMR: {old_mmr} {mmr_symbol} {abs(mmr_change)} = {new_mmr}"
            else:
                logging.error(
                    f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è user_id={user_id}"
                )

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ MMR –¥–ª—è user_id={user_id}: {e}")
        stats_text = "\n\n‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å MMR –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏."
    # --- –ö–æ–Ω–µ—Ü —Ä–∞—Å—á–µ—Ç–∞ MMR ---

    # –û—Ü–µ–Ω–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    if percentage == 100:
        grade = "üèÜ –û—Ç–ª–∏—á–Ω–æ! –í—Å–µ –æ—Ç–≤–µ—Ç—ã –≤–µ—Ä–Ω—ã!"
    elif percentage >= 75:
        grade = "üëç –•–æ—Ä–æ—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç!"
    elif percentage >= 50:
        grade = "üôÇ –ù–µ–ø–ª–æ—Ö–æ, –Ω–æ –º–æ–∂–Ω–æ –ª—É—á—à–µ."
    else:
        grade = "üí™ –°—Ç–∞—Ä–∞–π—Ç–µ—Å—å —É—Å–µ—Ä–¥–Ω–µ–µ!"

    result_text = (
        f"üèÅ –¢–µ—Å—Ç '{test_name}' –∑–∞–≤–µ—Ä—à–µ–Ω!\n\n"
        f"{grade}\n\n"
        f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {correct_answers}/{total_questions} ({percentage:.1f}%) {stats_text}"  # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç MMR
    )

    # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π query –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    final_message_target = (
        update.callback_query.message if update.callback_query else None
    )
    try:
        if final_message_target:
            # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (—Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –æ—Ç–≤–µ—Ç–∞)
            await final_message_target.edit_text(text=result_text, reply_markup=None)
        else:
            # –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–∏ –æ—à–∏–±–∫–µ), –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
            await context.bot.send_message(chat_id=user_id, text=result_text)

        # –ó–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        keyboard = [
            [InlineKeyboardButton("üìö –ù–∞–∑–∞–¥ –≤ –∫–∞—Ç–∞–ª–æ–≥", callback_data="test_catalog")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await context.bot.send_message(
            chat_id=user_id,
            text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=reply_markup,
        )

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞: {e}")
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã, –≤—Å–µ —Ä–∞–≤–Ω–æ –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ

    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–µ—Å—Ç–∞ –∏–∑ user_data
    if "custom_test" in context.user_data:
        del context.user_data["custom_test"]
